{"version":3,"sources":["webpack:///./src/templates/blog-post.js","webpack:///./src/components/seo.js","webpack:///./src/components/Bio.js","webpack:///./src/components/Layout.js"],"names":["BlogPostTemplate","render","post","this","props","data","markdownRemark","siteTitle","site","siteMetadata","title","_this$props$pageConte","pageContext","previous","next","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_3__","location","_components_seo__WEBPACK_IMPORTED_MODULE_4__","frontmatter","description","excerpt","className","datetime","date","formattedDate","dangerouslySetInnerHTML","__html","html","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","fields","slug","rel","React","Component","pageQuery","generateTitleTemplate","_ref","SEO","_ref2","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","query","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired","bioQuery","Bio","react_default","gatsby_browser_entry","_4027657132","Layout","header","_this$props","children","__PATH_PREFIX__","pathname","Fragment","components_Bio","Date","getFullYear"],"mappings":"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","file":"component---src-templates-blog-post-js-b376f8405bbbfc4b699e.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\n\nimport \"./index.css\";\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={post.frontmatter.title} description={post.excerpt} />\n        <h1 className=\"no-margin\">{post.frontmatter.title}</h1>\n\n        <time className=\"inline-block margin-bottom\" datetime={post.frontmatter.date}>{post.frontmatter.formattedDate}</time>\n\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n\n        <hr/>\n\n        <ul>\n          {previous && (\n            <li>\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            </li>\n          )}\n          {next && (\n            <li>\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            </li>\n          )}\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date\n        formattedDate: date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction generateTitleTemplate (title, {description}) {\n  if(title !== 'All posts') {\n    return `${title} | ${description}`\n  } else {\n    return `${description} | ${title}`\n  }\n}\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={generateTitleTemplate(title, data.site.siteMetadata)}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author } = data.site.siteMetadata\n        return (\n          <small className=\"inline-block\">\n            Written by <strong>{author}</strong> who lives and works in London building digital stuff.\n          </small>\n        )\n      }}\n    />\n  )\n}\n\nconst bioQuery = graphql`\n  query BioQuery {\n    site {\n      siteMetadata {\n        author\n      }\n    }\n  }\n`\n\nexport default Bio\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Bio from '../components/Bio'\n\nclass Layout extends React.Component {\n  render() {\n    const { location, title, children } = this.props\n    const rootPath = `${__PATH_PREFIX__}/`\n    let header\n\n    if (location.pathname === rootPath) {\n      header = (\n        <h1 className=\"logo\">\n          <Link\n            className=\"no-underline\"\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h1>\n      )\n    } else {\n      header = (\n        <h3 className=\"logo\">\n          <Link\n            className=\"no-underline\"\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h3>\n      )\n    }\n    return (\n      <React.Fragment>\n        <header className=\"header\">\n          {header}\n          <Link className=\"no-underline sans-serif\" to={`/`}>All posts</Link>\n        </header>\n        {children}\n        <Bio />\n        <footer>\n          <small>© {new Date().getFullYear()} - Built with ❤</small>\n        </footer>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Layout\n"],"sourceRoot":""}