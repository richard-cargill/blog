{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/seo.js","webpack:///./src/components/Bio.js","webpack:///./src/components/Layout.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_3__","location","_components_seo__WEBPACK_IMPORTED_MODULE_4__","keywords","className","map","_ref","node","frontmatter","fields","slug","gatsby__WEBPACK_IMPORTED_MODULE_2__","style","boxShadow","to","key","dangerouslySetInnerHTML","__html","excerpt","React","Component","pageQuery","generateTitleTemplate","description","SEO","_ref2","lang","meta","gatsby__WEBPACK_IMPORTED_MODULE_4__","query","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired","bioQuery","Bio","react_default","gatsby_browser_entry","_4027657132","Layout","header","_this$props","children","__PATH_PREFIX__","pathname","Fragment","components_Bio","Date","getFullYear"],"mappings":"uMAMMA,4FACJC,OAAA,WAAS,IACCC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAErC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAUb,KAAKC,MAAMY,SAAUR,MAAOH,GAC5CO,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACET,MAAM,YACNU,SAAU,yCAEXT,GACCG,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACZV,EAAMW,IAAI,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACNd,EAAQc,EAAKC,YAAYf,OAASc,EAAKE,OAAOC,KACpD,OACEb,EAAAC,EAAAC,cAACY,EAAA,KAAD,CAAMP,UAAU,4BAA4BQ,MAAO,CAAEC,UAAS,QAAYC,GAAIP,EAAKE,OAAOC,KAAMK,IAAKR,EAAKE,OAAOC,MAC/Gb,EAAAC,EAAAC,cAAA,MAAIK,UAAU,eACXX,GAEHI,EAAAC,EAAAC,cAAA,KAAGiB,wBAAyB,CAAEC,OAAQV,EAAKW,oBArBrCC,IAAMC,WAiCfnC,YAER,IAAMoC,EAAS,wMCpCtB,SAASC,EAAuB7B,EAAhCa,GAAsD,IAAdiB,EAAcjB,EAAdiB,YACtC,MAAa,cAAV9B,EACSA,EAAV,MAAqB8B,EAEXA,EAAV,MAA2B9B,EAI/B,SAAS+B,EAATC,GAA2D,IAA5CF,EAA4CE,EAA5CF,YAAaG,EAA+BD,EAA/BC,KAAMC,EAAyBF,EAAzBE,KAAMxB,EAAmBsB,EAAnBtB,SAAUV,EAASgC,EAAThC,MAChD,OACEI,EAAAC,EAAAC,cAAC6B,EAAA,YAAD,CACEC,MAAOC,EACP5C,OAAQ,SAAAC,GACN,IAAM4C,EACJR,GAAepC,EAAKI,KAAKC,aAAa+B,YACxC,OACE1B,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CACEmC,eAAgB,CACdP,QAEFjC,MAAOA,EACPyC,cAAeZ,EAAsB7B,EAAON,EAAKI,KAAKC,cACtDmC,KAAM,CACJ,CACEQ,KAAI,cACJC,QAASL,GAEX,CACEM,SAAQ,WACRD,QAAS3C,GAEX,CACE4C,SAAQ,iBACRD,QAASL,GAEX,CACEM,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASjD,EAAKI,KAAKC,aAAa8C,QAElC,CACEH,KAAI,gBACJC,QAAS3C,GAEX,CACE0C,KAAI,sBACJC,QAASL,IAGVQ,OACCpC,EAASqC,OAAS,EACd,CACEL,KAAI,WACJC,QAASjC,EAASsC,KAAT,OAEX,IAELF,OAAOZ,MAtDlBxC,KAAAuD,IA8DJlB,EAAImB,aAAe,CACjBjB,KAAI,KACJC,KAAM,GACNxB,SAAU,IAGZqB,EAAIoB,UAAY,CACdrB,YAAasB,IAAUC,OACvBpB,KAAMmB,IAAUC,OAChBnB,KAAMkB,IAAUE,MAChB5C,SAAU0C,IAAUG,QAAQH,IAAUC,QACtCrD,MAAOoD,IAAUC,OAAOG,YAGXzB,MAEf,IAAMM,EAAY,8OCzElB,IAAMoB,EAAQ,aAUCC,EA1Bf,WACE,OACEC,EAAAtD,EAAAC,cAACsD,EAAA,YAAD,CACExB,MAAOqB,EACPhE,OAAQ,SAAAC,GAAQ,IACNmD,EAAWnD,EAAKI,KAAKC,aAArB8C,OACR,OACEc,EAAAtD,EAAAC,cAAA,SAAOK,UAAU,gBAAjB,cACagD,EAAAtD,EAAAC,cAAA,cAASuC,GADtB,2DALNnD,KAAAmE,KCFEC,4FACJrE,OAAA,WAAS,IAGHsE,EAHGC,EAC+BrE,KAAKC,MAAnCY,EADDwD,EACCxD,SAAUR,EADXgE,EACWhE,MAAOiE,EADlBD,EACkBC,SA2BzB,OAtBEF,EAJkBG,WAGhB1D,EAAS2D,SAETR,EAAAtD,EAAAC,cAAA,MAAIK,UAAU,QACZgD,EAAAtD,EAAAC,cAACsD,EAAA,KAAD,CACEjD,UAAU,eACVU,GAAE,KAEDrB,IAML2D,EAAAtD,EAAAC,cAAA,MAAIK,UAAU,QACZgD,EAAAtD,EAAAC,cAACsD,EAAA,KAAD,CACEjD,UAAU,eACVU,GAAE,KAEDrB,IAMP2D,EAAAtD,EAAAC,cAACqD,EAAAtD,EAAM+D,SAAP,KACET,EAAAtD,EAAAC,cAAA,UAAQK,UAAU,UACfoD,EACDJ,EAAAtD,EAAAC,cAACsD,EAAA,KAAD,CAAMjD,UAAU,0BAA0BU,GAAE,KAA5C,cAED4C,EACDN,EAAAtD,EAAAC,cAAC+D,EAAD,MACAV,EAAAtD,EAAAC,cAAA,cACEqD,EAAAtD,EAAAC,cAAA,mBAAU,IAAIgE,MAAOC,cAArB,yBAtCW7C,IAAMC,WA6CZmC","file":"component---src-pages-index-js-af3e3cbdff7fe1be60da.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title=\"All posts\"\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n        {posts &&\n          <nav className=\"list\">\n            {posts.map(({ node }) => {\n              const title = node.frontmatter.title || node.fields.slug\n              return (\n                <Link className=\"no-underline inline-block\" style={{ boxShadow: `none` }} to={node.fields.slug} key={node.fields.slug}>\n                  <h3 className=\"list__title\">\n                    {title}\n                  </h3>\n                  <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n                </Link>\n              )\n            })}\n          </nav>\n        }\n\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction generateTitleTemplate (title, {description}) {\n  if(title !== 'All posts') {\n    return `${title} | ${description}`\n  } else {\n    return `${description} | ${title}`\n  }\n}\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={generateTitleTemplate(title, data.site.siteMetadata)}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author } = data.site.siteMetadata\n        return (\n          <small className=\"inline-block\">\n            Written by <strong>{author}</strong> who lives and works in London building digital stuff.\n          </small>\n        )\n      }}\n    />\n  )\n}\n\nconst bioQuery = graphql`\n  query BioQuery {\n    site {\n      siteMetadata {\n        author\n      }\n    }\n  }\n`\n\nexport default Bio\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Bio from '../components/Bio'\n\nclass Layout extends React.Component {\n  render() {\n    const { location, title, children } = this.props\n    const rootPath = `${__PATH_PREFIX__}/`\n    let header\n\n    if (location.pathname === rootPath) {\n      header = (\n        <h1 className=\"logo\">\n          <Link\n            className=\"no-underline\"\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h1>\n      )\n    } else {\n      header = (\n        <h3 className=\"logo\">\n          <Link\n            className=\"no-underline\"\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h3>\n      )\n    }\n    return (\n      <React.Fragment>\n        <header className=\"header\">\n          {header}\n          <Link className=\"no-underline sans-serif\" to={`/`}>All posts</Link>\n        </header>\n        {children}\n        <Bio />\n        <footer>\n          <small>© {new Date().getFullYear()} - Built with ❤</small>\n        </footer>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Layout\n"],"sourceRoot":""}